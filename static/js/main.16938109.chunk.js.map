{"version":3,"sources":["images/background.jpg","components/QuestionCard.styled.ts","API.ts","components/QuestionCard.tsx","utils.ts","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","key","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16938109.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.bb137ffe.jpg\";","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n max-width: 1100px;\n background: #ebfeff;\n border-radius: 10px;\n border: 2px solid #0085a3;\n padding: 20px;\n box-shadow: 0 5px 10px rgba(0, 0, 0, 0.25);\n text-align: center;\n\np {\n    font-size: 1rem;\n}\n`\n\ntype ButtonWrapperProps = {\n    correct: boolean;\n    userClicked: boolean;\n}\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n    transition: all 0.3s ease;\n\n    :hover {\n        opacity: 0.8;\n    }\n\n    button {\n        cursor: pointer;\n        user-select: none;\n        font-size: 0.8rem;\n        width: 100%;\n        height: 40px;\n        margin: 5px 0;\n        background: ${({ correct, userClicked }) =>\n        correct\n            ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\n            : !correct && userClicked\n                ? 'linear-gradient(90deg, #ff5656, #c16868)'\n                : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n        border: 3px solid #fff;\n        box-shadow: 1px 2px 0 rgba(0, 0, 0, 0.1);\n        border-radius: 10px;\n        color: #fff;\n        text-shadow: 0 1px 0 rgba(0, 0, 0, 0.25);\n    }\n`","import { shuffleArray } from './utils';\n\nexport type Question = {\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n}\n\nexport type QuestionState = Question & { answers: string[] };\n\n\nexport enum Difficulty {\n    EASY = 'easy',\n    MEDIUM = 'medium',\n    HARD = 'hard'\n}\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n    const data = await (await fetch(endpoint)).json();\n    return data.results.map((question: Question) => (\n        {\n            ...question,\n            answers: shuffleArray([\n                ...question.incorrect_answers,\n                question.correct_answer\n            ])\n        }\n    ))\n}","import React from 'react';\nimport { AnswerObject } from '../App';\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styled';\n\ntype Props = {\n    question: string;\n    answers: string[];\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer: AnswerObject | undefined;\n    questionNr: number;\n    totalQuestions: number;\n}\n\nconst QuestionCard: React.FC<Props> = ({\n    question,\n    answers,\n    callback,\n    userAnswer,\n    questionNr,\n    totalQuestions }) => (\n        <Wrapper>\n            <p className=\"number\">\n                Question: {questionNr} / {totalQuestions}\n            </p>\n            <p dangerouslySetInnerHTML={{ __html: question }} />\n            <div>\n                {answers.map(answer => (\n                    <ButtonWrapper\n                        key={answer}\n                        correct={userAnswer?.correctAnswer === answer}\n                        userClicked={userAnswer?.answer === answer}\n                    >\n                        <button disabled={!!userAnswer} value={answer} onClick={callback}>\n                            <span dangerouslySetInnerHTML={{ __html: answer }} />\n                        </button>\n                    </ButtonWrapper>\n                ))}\n            </div>\n\n        </Wrapper>\n    )\n    ;\n\n\nexport default QuestionCard;","import { isMainThread } from \"worker_threads\";\n\nexport const shuffleArray = (array: any[]) =>\n    [...array].sort(() => Math.random() - 0.5);","import styled, { createGlobalStyle } from 'styled-components';\nimport BGImage from './images/background.jpg';\n\nexport const GlobalStyle = createGlobalStyle`\n    * {\n        box-sizing: border-box;\n        font-family: 'Catamaran', sans-serif;\n    }\n\n    html {\n        height: 100%\n    }\n\n    body {\n        background-image: url(${BGImage});\n        background-size: cover;\n        margin: 0;\n        padding: 0 20px;\n        display: flex;\n        justify-content: center;\n    }\n`\nexport const Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    > p {\n        color: #fff;\n    }\n\n    .score {\n        color: #fff;\n        font-size: 2em;\n        margin: 0;\n    }\n\n    h1 {\n        font-family: Fascinate Inline, sans-serif;\n        background-image: linear-gradient(180deg, #fff, #87f1ff);\n        background-size: 100%;\n        background-clip: text;\n        -webkit-background-clip: text;\n        -webkit-text-fill-color: transparent;\n        -moz-background-clip: text;\n        -moz-text-fill-color: transparent;\n        filter: drop-shadow(2px 2px  #0085a3);\n        font-size: 70px;\n        text-align: center;\n        font-weight: 400;\n        margin: 20px;\n    }\n\n    .start, .next {\n        cursor: pointer;\n        background: linear-gradient(180deg, #fff, #ffcc91);\n        border: 2px solid #d38558;\n        box-shadow: 0 5px 10px rgba(0, 0, 0, 0.25);\n        border-radius: 10px;\n        height: 40px;\n        margin: 20px 0;\n        padding: 0 40px;\n    }\n\n    .start {\n        max-width: 200px;\n    }\n\n`","import React, { useState } from 'react';\n\nimport QuestionCard from './components/QuestionCard';\nimport { fetchQuizQuestions } from './API';\nimport { QuestionState, Difficulty } from './API';\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if (correct) setScore(prev => prev + 1);\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      }\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n\n  }\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion)\n    }\n\n  }\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>REACT QUIZZ</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={startTrivia}>\n            Start\n          </button>\n        ) : null}\n\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n        {loading && <p>Loading Questions...</p>}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )\n        }\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}